@startuml
!theme plain
hide empty method
hide empty member

class NetworkPros #white{
    + {static}Domain: int
    + {static}Type: int
    + {static}Protocol: int
}

abstract class TCPNode #white{
    .. attributes ..
    + Name: string
    + ErrerInfo: char[256]
    + Socket: int
    + IP: string
    + Port: unsigned short
    .. marks ..
    + Running: bool
    ----
    + TCPNode(name)
    + {abstract}~TCPNode()
    .. server and client ..
    + int CreateSocket()
    + void Close()
    + bool SetBlock(isBlock)
    + {abstract}int Send(buf, bufSize)
    + {abstract}int Recv(buf, bufSize)
    .. server only ..
    + {abstract}bool Bind(port)
    + {abstract}bool Listen(number)
    + {abstract}TCPNode Accept()
    .. client only ..
    + {abstract}bool Connect()
    + {abstract}bool Disconnect()
}

class ClientNode #white{
    .. server info ..
    - m_ServerIP: string
    - m_ServerPort: unsigned short
    ----
    + ClientNode(name)
    + ~ClientNode()
    .. override ..
    + bool Connect()
    + bool Disconnect()
}

class ServerNode #white{
    + ServerNode(name)
    + ~ServerNode()
    ..override..
    + bool Bind(port)
    + bool Listen(number)
    + TCPNode Accept()
}

abstract class TCPThread #white{
    ..atttibutes..
    + Name: string
    + tcpNode: TCPNode*
    - m_Thread: thread
    .. UI ..
    + m_StatusLog: ImLog
    + m_MessageLog: ImLog
    + m_StatusInfo: string
    ----
    + TCPThread(name)
    + {abstract}~TCPThread()
    .. override ..
    + {abstract}void Main()
    + {abstract}void UIRenderer(open)
}

class ClientThread #white{
    ..attributes..
    - m_msg: string
    ----
    + ClientThread(name)
    + ~ClientThread()
    .. override ..
    + void Main()
    + void UIRenderer(open)
    
}
class ServerThread #white{
    ..attributes..
    - m_ConnectedClients: map
    ----
    + ServerThread(name)
    + ~ServerThread()
    .. override ..
    + void Main()
    + void UIRenderer(open)
}


class Message #white{
    ..attributes..
    + Data: bitset
    + Code: enum
    ----
    ..operator overload..
    + bool operator/(binary) 
    + Message& operator>>(bits) 
    + Message& operator<<(bits) 
    + Message& operator^(msg) 
    + Message& operator^(binary)
    ..static function..
    + {static}int GetLength(binary)
    + {static}void StringToBits(msg, binary)
    + {static}string BitsToString(binary)
    + {static}void Encode(msg)
    + {static}bool Decode(msg)
}

@enduml
