@startuml
!theme plain
hide empty method
hide empty member

class NetworkPros #white{
    + {static}Domain: int
    + {static}Type: int
    + {static}Protocol: int
}

abstract class TcpNode #white{
    .. attributes ..
    + m_Name: string
    + Socket: int
    + IP: string
    + Port: unsigned short
    .. marks ..
    - m_Running: bool
    .. message queue ..
    + m_StatusQueue: queue
    + m_MessageQueue: queue
    ----
    + TcpNode(name)
    + {abstract}~TcpNode()
    .. server and client ..
    + int CreateSocket()
    + bool Running();
    + void Close()
    + {abstract}int Send(buf, bufSize)
    + {abstract}int Recv(buf, bufSize)
    .. server only ..
    + {abstract}bool Bind(port)
    + {abstract}TcpNode Accept()
    .. client only ..
    + {abstract}bool Connect()
    + {abstract}bool Disconnect()
    + {abstract}{abstract}bool TriggerConnect(ip, port)
    + {abstract}{abstract}bool TriggerDisconnect()
    + {abstract}bool TriggerSend(msg)
    + {abstract}bitset GetActiveEvent()
    + {abstract}bool Sending()
}

abstract class Thread #white{
    - m_TcpNode: TcpNode*
    - m_Thread: thread
    .. UI ..
    - m_StatusLog: ImLog
    - m_MessageLog: ImLog
    + m_StatusInfo: string
    ----
    + Thread(id)
    + {abstract}~Thread()
    .. tcp node thread ..
    + {abstract}void Main()
    .. UI thread ..
    + {abstract}void UIRenderer()
}

class ClientNode #white{
    .. server info ..
    - m_ServerIP: string
    - m_ServerPort: unsigned short
    .. marks ..
    - m_ActiveEvent: bitset
    ----
    + ClientNode(name)
    + ~ClientNode()
    .. override ..
    + bool TriggerConnect(ip, port)
    + bool TriggerDisconnect()
    + bool TriggerSend(msg)
    + bitset GetActiveEvent()
    + bool Sending()
}
note right of ClientNode
    one-hot 事件编码
end note


class ServerNode #white{
    + ServerNode(name)
    + ~ServerNode()
}
class ClientThread #white{
    + ClientThread(id)
    + ~ClientThread()
    .. override ..
    + void Main()
    + void UIRenderer()
    
}
class ServerThread #white{
    + ServerThread(id)
    + ~ServerThread()
    .. override ..
    + void Main()
    + void UIRenderer()
}


/' abstract class Node #white{ '/
/' # m_Nodefd: int '/
/' # m_Running: bool '/
/' + int GetNodefd() '/
/' # {abstract}void Init() '/
/' # {abstract}void Close() '/
/' } '/
/' class Server #white{ '/
/'     ..identifier.. '/
/'     + HostName: string '/  
/'     + Port: uint16_t '/
/'     ..marks.. '/
/'     - m_Listening: bool '/
/'     ..threads.. '/
/'     - m_ListeningThread: thread '/
/'     ..fd.. '/
/'     - m_Listenfd: int '/
/'     - m_Clientfd: int '/
/'     ---- '/
/'     ..main.. '/
/'     + Start() '/
/'     - void Init(Network&) '/
/'     - void Listening() '/
/'     - void Shutdown() '/
/' } '/
/' class Client #white{ '/
/'     ..marks.. '/
/'     - m_Sending: bool '/
/'     - m_Running: bool '/
/'     ..threads.. '/
/'     - m_SendingThread: thread '/
/'     - m_ConnectingThread: thread '/
/'     ..fd.. '/
/'     - m_Sockfd: int '/
/'     ---- '/
/'     ..main.. '/
/'     + void Send(Server*, string&) '/
/'     - void Init(Network&) '/
/'     - void Connect(Server*) '/
/'     - queque<Messsage> Processing(string&) '/
/'     - void Shutdown() '/
/' } '/
/' class Random #white{ '/
/'     + static int randomIntNumber(begin, end) '/
/'     + static bool randomTrigger(probability) '/
/' } '/
/' class Message #white{ '/
/' } '/
/' class Status #white{ '/
/' } '/
@enduml
